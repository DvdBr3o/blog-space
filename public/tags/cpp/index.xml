<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cpp on DvdBr3o</title>
        <link>//localhost:1313/tags/cpp/</link>
        <description>Recent content in Cpp on DvdBr3o</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 12 Dec 2024 19:26:06 +0800</lastBuildDate><atom:link href="//localhost:1313/tags/cpp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43; 错误机制</title>
        <link>//localhost:1313/post/%E5%BC%80%E5%8F%91/cpp/cpp-%E9%94%99%E8%AF%AF%E6%9C%BA%E5%88%B6/</link>
        <pubDate>Thu, 12 Dec 2024 12:57:31 +0800</pubDate>
        
        <guid>//localhost:1313/post/%E5%BC%80%E5%8F%91/cpp/cpp-%E9%94%99%E8%AF%AF%E6%9C%BA%E5%88%B6/</guid>
        <description>&lt;h2 id=&#34;备选方式&#34;&gt;&lt;a href=&#34;#%e5%a4%87%e9%80%89%e6%96%b9%e5%bc%8f&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;备选方式
&lt;/h2&gt;&lt;p&gt;不看 outdated 的方式，只看 modern C++ 的错误处理方式主要是以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异常 exception&lt;/li&gt;
&lt;li&gt;std::expected&amp;lt;T, E&amp;gt; (since C++23 or with &lt;code&gt;tl_expected&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;assert/panic&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用情景&#34;&gt;&lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e6%83%85%e6%99%af&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;使用情景
&lt;/h2&gt;&lt;p&gt;为了开销考虑，很有可能是无法 exclusively 选择其中一种的，需要按照错误发生的可能性进行特定选择。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;错误机制&lt;/th&gt;
          &lt;th&gt;运行开销&lt;/th&gt;
          &lt;th&gt;使用情景&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;exception&lt;/td&gt;
          &lt;td&gt;错误路径动态分配&lt;/td&gt;
          &lt;td&gt;默认避免使用异常以防开销，非常肯定出错无法解决就 &lt;code&gt;noexcept&lt;/code&gt;，如果抛出就 crash 则与 assert 无差别&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;std::expected&lt;/td&gt;
          &lt;td&gt;Error 空间分配开销&lt;/td&gt;
          &lt;td&gt;错误路径可能性大且倾向于可解决，如 io 错误&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;assert/panic&lt;/td&gt;
          &lt;td&gt;无&lt;/td&gt;
          &lt;td&gt;非常肯定出错无法解决&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;推荐策略&#34;&gt;&lt;a href=&#34;#%e6%8e%a8%e8%8d%90%e7%ad%96%e7%95%a5&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;推荐策略
&lt;/h2&gt;&lt;p&gt;在 modern c++ 可以避免使用 &lt;code&gt;assert&lt;/code&gt;。&lt;code&gt;assert&lt;/code&gt; 可以作为逻辑检查的补充。&lt;/p&gt;
&lt;p&gt;而在 &lt;code&gt;exception&lt;/code&gt; 和 &lt;code&gt;std::expected&lt;/code&gt; 的选择，可以顾名思义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exception&lt;/code&gt;：意料之外的错误，无法解决，抛出并最好 crash。概率在 1% 下时可以考虑。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::expected&lt;/code&gt;：意料之中的错误，可以解决，显式处理。错误路径概率不低。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43; Benchmarking</title>
        <link>//localhost:1313/post/%E5%BC%80%E5%8F%91/cpp/cpp-benchmarking/</link>
        <pubDate>Tue, 10 Dec 2024 23:15:57 +0800</pubDate>
        
        <guid>//localhost:1313/post/%E5%BC%80%E5%8F%91/cpp/cpp-benchmarking/</guid>
        <description>&lt;h2 id=&#34;候选名单&#34;&gt;&lt;a href=&#34;#%e5%80%99%e9%80%89%e5%90%8d%e5%8d%95&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;候选名单
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xrepo search benchmark
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;找到以下几个候选库：&lt;/p&gt;
 

&lt;a href=https://github.com/google/benchmark target=&#34;_blank&#34; data-tag=&#34;cardlink&#34;&gt;&lt;/a&gt;

&lt;p&gt;谷歌大厂出品，但是不出意料有臭臭の宏。。&lt;/p&gt;
 

&lt;a href=https://github.com/iboB/picobench target=&#34;_blank&#34; data-tag=&#34;cardlink&#34;&gt;&lt;/a&gt;

&lt;p&gt;9 months ago&amp;hellip; 估计死透了吧这库，还是 C++11 的，感觉已经可以放弃了 &lt;del&gt;(logo 还挺萌的)&lt;/del&gt;&lt;/p&gt;
 

&lt;a href=https://github.com/martinus/nanobench target=&#34;_blank&#34; data-tag=&#34;cardlink&#34;&gt;&lt;/a&gt;

&lt;p&gt;支持到 C++20，seems promising。但是 example 里直接写 lambda 感觉不是很模块化，况且 lambda capture by reference 感觉也有性能误差问题。。之后详细看看&lt;/p&gt;
 

&lt;a href=https://github.com/Compaile/ctrack target=&#34;_blank&#34; data-tag=&#34;cardlink&#34;&gt;&lt;/a&gt;

&lt;p&gt;到 C++17，至少微 modern。而且打了 lightweight high-performance 的标签 &lt;del&gt;(在抢 nano 的饭碗吗阿喂)&lt;/del&gt; 感觉可以一试&lt;/p&gt;
&lt;h2 id=&#34;试试看&#34;&gt;&lt;a href=&#34;#%e8%af%95%e8%af%95%e7%9c%8b&#34; class=&#34;header-anchor&#34;&gt;&lt;/a&gt;试试看！
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test cpp benchmarking tools 🔽 📅 2024-12-22&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43; 调优验证工具</title>
        <link>//localhost:1313/post/%E5%BC%80%E5%8F%91/cpp/cpp-%E8%B0%83%E4%BC%98%E9%AA%8C%E8%AF%81%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Tue, 10 Dec 2024 22:57:25 +0800</pubDate>
        
        <guid>//localhost:1313/post/%E5%BC%80%E5%8F%91/cpp/cpp-%E8%B0%83%E4%BC%98%E9%AA%8C%E8%AF%81%E5%B7%A5%E5%85%B7/</guid>
        <description> 

&lt;a href=https://mq-b.github.io/Loser-HomeWork/src/%E5%8D%A2%E7%91%9F%E6%97%A5%E7%BB%8F/godbolt%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3 target=&#34;_blank&#34; data-tag=&#34;cardlink&#34;&gt;&lt;/a&gt;

&lt;p&gt;&lt;del&gt;(疑似 mq 白？)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;博客中另外提到的好用工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

 &lt;a
  href=&#34;https://cppinsights.io/&#34;
  
  target=&#34;_blank&#34;
  
  &gt;cppinsights&lt;/a
&gt;
 用于查看编译器处理 C++ 语法之后的代码。&lt;/li&gt;
&lt;li&gt;

 &lt;a
  href=&#34;https://quick-bench.com/&#34;
  
  target=&#34;_blank&#34;
  
  &gt;quick-bench&lt;/a
&gt;
 对比测试 C++ 代码效率。&lt;/li&gt;
&lt;li&gt;

 &lt;a
  href=&#34;https://build-bench.com/&#34;
  
  target=&#34;_blank&#34;
  
  &gt;build-bench&lt;/a
&gt;
 对比测试 C++ 代码效率，用法比前面的简单。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
